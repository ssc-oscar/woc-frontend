# Map to extract the 22-character user ID from the last 22 characters of the API key
# from either the Authorization header or the token cookie
map $http_authorization $auth_header {
    default "";
    "~Bearer ([A-Za-z0-9-]+)$" $1;
}

map "${auth_header}${cookie_token}" $user_rate_limit_key {
    default "";
    "~.{22}$" $1;  # Extract the last 22 characters of the API key
}

# set ip rate limit key to "" if api_user_id is not ""
# When the key is "", rate limit is disabled
map $user_rate_limit_key $ip_rate_limit_key {
    default $binary_remote_addr;
    "~.+" "";
}

# Other server configurations...
# Define rate limiting zones
limit_req_zone $user_rate_limit_key zone=api_per_user:10m rate=600r/m;
limit_req_zone $ip_rate_limit_key zone=api_per_ip:10m rate=60r/m;

log_format sep
        'at=$time_iso8601\t|'
        'ip=$remote_addr\t|'
        'req=$request\t|'
        'status=$status\t|'
        'size=$body_bytes_sent\t|'
        'ua=$http_user_agent\t|'
        'time=$upstream_response_time\t|'
        ;

server {
    access_log /dev/stdout sep;
    error_log /dev/stderr;
    
    # gzip on;
    # gzip_comp_level 6;
    # gzip_min_length 2048;
    # gzip_proxied any;
    # gzip_vary on;
    # gzip_types text/plain text/css text/javascript application/javascript image/svg+xml application/json text/event-stream application/wasm;

    brotli on;
    brotli_static on;
    brotli_comp_level 6;
    brotli_types text/plain text/css application/javascript application/json;

    location /api/ {
        # Forward the request to your application
        rewrite ^/api/(.*) /$1 break;
        proxy_pass http://${API_HOST}:${API_PORT};
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_http_version 1.1;
        proxy_buffering off;

        # Apply rate limits
        limit_req zone=api_per_user burst=100 nodelay;
        limit_req zone=api_per_ip burst=20 nodelay;
        limit_req_status 429;

        # Check if we extracted a valid user ID from the API key
        if ($user_rate_limit_key != "") {
            # Add headers to show the rate limit info for authenticated requests
            add_header X-RateLimit-Limit 600;
            add_header X-RateLimit-Window "1m";
            add_header X-RateLimit-User-ID $user_rate_limit_key;
        } 
        if ($user_rate_limit_key = "") {
            # Rate limit headers for unauthenticated requests
            add_header X-RateLimit-Limit 60;
            add_header X-RateLimit-Window "1m";
            add_header X-RateLimit-User-ID $remote_addr;
        }
        
        add_header Retry-After 60 always;
    }

    # Static server
    location / {
        root /usr/share/nginx/html;
        index index.html;
        try_files $uri $uri/ /index.html;
        # cache
        expires 1h;
        add_header Cache-Control "public, max-age=3600";
    }
    
    # Custom error response for rate limiting
    error_page 429 = @rate_limited;
    
    location @rate_limited {
        add_header Retry-After 60 always;
        add_header X-RateLimit-Reset $time_iso8601 always;
        
        # Return a JSON error
        default_type application/json;
        return 429 '{"detail": "Oops! You hit a rate limit. Try again later or login to get a higher limit."}';
    }
}
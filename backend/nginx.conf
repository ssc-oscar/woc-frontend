# Map to extract the 22-character user ID from the last 22 characters of the API key
# from either the Authorization header or the token cookie
map $http_authorization $auth_header {
    default "";
    "~Bearer ([A-Za-z0-9-]+)$" $1;
}

map "$auth_header$cookie_token" $api_key {
    default "";
    "~.+" $0;
}

map $api_key $api_user_id {
    default "";
    "~.{22}$" $0;  # Extract the last 22 characters of the API key
}

# Define rate limiting zones
limit_req_zone $api_user_id zone=api_per_user:10m rate=100r/m;
limit_req_zone $binary_remote_addr zone=api_per_ip:10m rate=10r/m;

server {
    # Other server configurations...
    
    location /api/ {
        # Apply rate limits
        limit_req zone=api_per_user burst=100 nodelay;
        limit_req zone=api_per_ip burst=20 nodelay;

        # Check if we extracted a valid user ID from the API key
        if ($api_user_id != "") {
            # Add headers to show the rate limit info for authenticated requests
            add_header X-RateLimit-Limit 100;
            add_header X-RateLimit-Window "1m";
            add_header X-RateLimit-User-ID $api_user_id;
        }
        if ($api_user_id = "") {
            # Rate limit headers for unauthenticated requests
            add_header X-RateLimit-Limit 10;
            add_header X-RateLimit-Window "1m";
        }
        
        # Include standard rate limit response headers
        add_header X-RateLimit-Remaining "N/A" always;
        add_header X-RateLimit-Reset $time_iso8601 always;
        
        # Forward the request to your application
        proxy_pass http://$API_HOST:$API_PORT;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Custom error response for rate limiting
    error_page 429 = @rate_limited;
    
    location @rate_limited {
        add_header Retry-After 60 always;
        add_header X-RateLimit-Reset $time_iso8601 always;
        
        # Return a JSON error
        default_type application/json;
        return 429 '{"error": "Too many requests", "status": 429, "details": "Oops! You hit a rate limit. Try again later or login to get a higher limit."}';
    }
}